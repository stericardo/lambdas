apply plugin: 'application'
apply plugin: 'java'

mainClassName = 'com.stevenprogramming.training.lambda.app.HelloApp'

dependencies {
	  compile files(fileTree(dir: 'lib', includes: ['*.jar']))
      compile project(':core')
      compile 'org.apache.commons:commons-lang3:3.4'
      compile 'org.apache.logging.log4j:log4j-core:2.6.2'
}

jar {
		/*from {
        	(configurations.runtime).collect {
            	it.isDirectory() ? it : zipTree(it)
        	}
    	}*/
		//from configurations.runtime
		//into 'build/libs' If you enable this jar file could save internal folders for jar and all configurations
   		baseName = 'Steven-Lambdas-Training'
    	/*manifest {
        	attributes 'Implementation-Title': 'Steven Ricardo Mendez Brenes, Lambda training',
                   'Implementation-Version': version,
                   'Main-Class': 'com.stevenprogramming.training.lambda.app.HelloApp'
		}*/
	manifest {
		attributes "Implementation-Title": "Steven Ricardo Mendez Brenes, Lambda training"
		attributes "Main-Class": "com.stevenprogramming.training.lambda.app.HelloApp"
		attributes "Class-Path": configurations.runtimeClasspath.files.collect { 'lib/' + it.getName() }.join(' ')
	}
}

task copyDeps(type: Copy) {
	from configurations.runtime
	into 'build/libs/lib'
}

task runApp(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath

  main = mainClassName

  args '1', 'Param2'

}